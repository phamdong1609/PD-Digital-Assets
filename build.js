const fs = require('fs');
const path = require('path');
const posthtml = require('posthtml');
const include = require('posthtml-include');

// --- KHAI B√ÅO C√ÅC ƒê∆Ø·ªúNG D·∫™N C·ªêT L√ïI ---
const rootDir = __dirname;
const templatesDir = path.join(rootDir, 'template');
const distDir = path.join(rootDir, 'dist');
const libraryDir = path.join(rootDir, 'library');
const coreDir = path.join(rootDir, 'core');

/**
 * ===================================================================================
 * H√ÄM M·ªöI: Qu√©t file HTML ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c linh ki·ªán ƒë∆∞·ª£c <include>
 * ƒê√¢y l√† b·ªô n√£o m·ªõi c·ªßa robot, gi√∫p n√≥ bi·∫øt ch√≠nh x√°c c·∫ßn l·∫•y nh·ªØng linh ki·ªán n√†o.
 * ===================================================================================
 * @param {string} htmlContent - N·ªôi dung c·ªßa file template (v√≠ d·ª•: ct9-index.html)
 * @returns {string[]} M·ªôt m·∫£ng ch·ª©a c√°c ƒë∆∞·ªùng d·∫´n ƒë·∫øn file HTML c·ªßa linh ki·ªán.
 */
function getIncludedComponents(htmlContent) {
    console.log('   - ƒêang ph√¢n t√≠ch b·∫£n thi·∫øt k·∫ø ƒë·ªÉ t√¨m linh ki·ªán...');
    const includeRegex = /<include src="([^"]+)"/g;
    const components = [];
    let match;
    while ((match = includeRegex.exec(htmlContent)) !== null) {
        components.push(match[1]);
    }
    console.log(`   ‚úÖ ƒê√£ t√¨m th·∫•y ${components.length} linh ki·ªán c·∫ßn l·∫Øp r√°p.`);
    return components;
}


/**
 * ===================================================================================
 * H√ÄM CH√çNH: L·∫Øp r√°p m·ªôt trang ho√†n ch·ªânh
 * H√†m n√†y ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p ƒë·ªÉ ch·ªâ l·∫•y CSS v√† JS c·ªßa c√°c linh ki·ªán c·∫ßn thi·∫øt.
 * ===================================================================================
 * @param {string} templateFile - T√™n c·ªßa file b·∫£n thi·∫øt k·∫ø (v√≠ d·ª•: 'ct9-index.html')
 */
async function buildSinglePage(templateFile) {
    const hubName = path.basename(templateFile, '-index.html'); // => "ct8", "ct9"
    const sourcePath = path.join(templatesDir, templateFile);
    const destPath = path.join(distDir, `${hubName}-dist.html`);

    console.log(`\n--- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë∆°n h√†ng: ${hubName} ---`);
    try {
        const htmlContent = fs.readFileSync(sourcePath, 'utf8');
        
        // B∆Ø·ªöC M·ªöI: L·∫•y danh s√°ch c√°c linh ki·ªán c·∫ßn d√πng t·ª´ file template
        const requiredComponents = getIncludedComponents(htmlContent);

        // === 1. T·ªîNG H·ª¢P CSS TH√îNG MINH ===
        console.log('   - ƒêang t·ªïng h·ª£p CSS theo ƒë∆°n h√†ng...');
        const cssContents = [];

        // 1.1 Lu√¥n n·∫°p theme.css l√µi
        const themePath = path.join(coreDir, 'styles', 'theme.css');
        if (fs.existsSync(themePath)) {
            cssContents.push(fs.readFileSync(themePath, 'utf8'));
        }

        // 1.2 Ch·ªâ n·∫°p CSS c·ªßa c√°c linh ki·ªán ƒë∆∞·ª£c y√™u c·∫ßu
        requiredComponents.forEach(componentPath => {
            const cssPath = path.join(rootDir, componentPath.replace('.html', '.css'));
            if (fs.existsSync(cssPath)) {
                cssContents.push(fs.readFileSync(cssPath, 'utf8'));
            }
        });
        
        const finalCss = cssContents.join('\n\n');
        console.log('   ‚úÖ ƒê√£ t·ªïng h·ª£p CSS th√†nh c√¥ng.');

        // === 2. ƒê√ìNG G√ìI JAVASCRIPT TH√îNG MINH (GI·∫¢I QUY·∫æT L·ªñI IMPORT) ===
        console.log(`   - ƒêang ƒë√≥ng g√≥i JS theo ƒë∆°n h√†ng cho ${hubName}...`);
        const jsContents = [];

        // 2.1 Ch·ªâ n·∫°p JS c·ªßa c√°c linh ki·ªán ƒë∆∞·ª£c y√™u c·∫ßu
        requiredComponents.forEach(componentPath => {
            const jsPath = path.join(rootDir, componentPath.replace('.html', '.js'));
            if (fs.existsSync(jsPath)) {
                // X√≥a b·ªè d√≤ng 'export' ƒë·ªÉ bi·∫øn n√≥ th√†nh script th∆∞·ªùng
                const jsModuleContent = fs.readFileSync(jsPath, 'utf8');
                const jsScriptContent = jsModuleContent.replace(/export function/g, 'function');
                jsContents.push(jsScriptContent);
            }
        });

        // 2.2 N·∫°p file init chuy√™n d·ª•ng cho hub n√†y (n·∫øu c√≥)
        const initPath = path.join(coreDir, 'scripts', `${hubName}-init.js`);
        if (fs.existsSync(initPath)) {
            const initContent = fs.readFileSync(initPath, 'utf8');
            // X√≥a b·ªè c√°c d√≤ng 'import' v√¨ ch√∫ng ta ƒë√£ g·ªôp file th·ªß c√¥ng
            const cleanInitContent = initContent.replace(/import .*\n/g, '');
            jsContents.push(cleanInitContent);
            console.log(`   ‚úÖ ƒê√£ n·∫°p v√† x·ª≠ l√Ω ${hubName}-init.js`);
        } else {
            console.log(`   -> Kh√¥ng t√¨m th·∫•y file init cho ${hubName}.`);
        }
        
        const finalJs = jsContents.join('\n\n');
        console.log('   ‚úÖ ƒê√£ ƒë√≥ng g√≥i JS th√†nh c√¥ng.');
        
        // === 3. L·∫ÆP R√ÅP HTML ===
        console.log('   - ƒêang l·∫Øp r√°p v√† ƒë√≥ng g√≥i HTML...');
        let intermediateHtml = htmlContent
            .replace('<!-- INJECT_CSS_PLACEHOLDER -->', `<style>\n${finalCss}\n</style>`)
            .replace('<!-- INJECT_JS_PLACEHOLDER -->', `<script>\n${finalJs}\n</script>`);

        // S·ª≠ d·ª•ng posthtml-include ƒë·ªÉ gh√©p c√°c file HTML linh ki·ªán v√†o
        const result = await posthtml([include({ root: rootDir })]).process(intermediateHtml);
        fs.writeFileSync(destPath, result.html);
        console.log(`   üéâ ƒê√£ t·∫°o file ho√†n ch·ªânh: ${path.basename(destPath)}`);

    } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file ${templateFile}:`, error);
    }
}

/**
 * ===================================================================================
 * H√ÄM KH·ªûI ƒê·ªòNG: Ch·∫°y to√†n b·ªô quy tr√¨nh
 * ===================================================================================
 */
async function buildAll() {
    console.log('--- KH·ªûI ƒê·ªòNG NH√Ä M√ÅY S·∫¢N XU·∫§T PHI√äN B·∫¢N 2.0 ---');
    if (!fs.existsSync(distDir)) {
        fs.mkdirSync(distDir, { recursive: true });
    }
    // T·ª± ƒë·ªông t√¨m t·∫•t c·∫£ c√°c file b·∫£n thi·∫øt k·∫ø trong th∆∞ m·ª•c template
    const templateFiles = fs.readdirSync(templatesDir).filter(file => file.endsWith('-index.html'));
    
    for (const file of templateFiles) {
        await buildSinglePage(file);
    }
    
    console.log('\n--- B√ÅO C√ÅO: Qu√° tr√¨nh build ƒë√£ ho√†n t·∫•t! ---');
}

// Ch·∫°y "nh√† m√°y"
buildAll();
