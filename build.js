// build.js

// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt ƒë√£ c√†i ƒë·∫∑t ·ªü b∆∞·ªõc 2
const fs = require('fs-extra');
const path = require('path');
const { parse } = require('node-html-parser');

// H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán vi·ªác build
async function build() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh build...');

        // 1. ƒê·ªçc n·ªôi dung file index.html g·ªëc
        const indexPath = path.join(__dirname, 'index.html');
        const indexHtmlContent = await fs.readFile(indexPath, 'utf8');

        // 2. Ph√¢n t√≠ch c√∫ ph√°p HTML ƒë·ªÉ l√†m vi·ªác v·ªõi n√≥ nh∆∞ m·ªôt ƒë·ªëi t∆∞·ª£ng
        const root = parse(indexHtmlContent);

        // 3. T√¨m t·∫•t c·∫£ c√°c th·∫ª div c√≥ thu·ªôc t√≠nh 'data-include'
        const includeElements = root.querySelectorAll('[data-include]');
        console.log(`üîç T√¨m th·∫•y ${includeElements.length} th√†nh ph·∫ßn c·∫ßn nh√∫ng.`);

        // 4. L·∫∑p qua t·ª´ng th·∫ª v√† thay th·∫ø n√≥ b·∫±ng n·ªôi dung th·∫≠t
        for (const element of includeElements) {
            const fileToInclude = element.getAttribute('data-include');
            const filePath = path.join(__dirname, fileToInclude);

            if (await fs.pathExists(filePath)) {
                const content = await fs.readFile(filePath, 'utf8');
                // Thay th·∫ø th·∫ª div b·∫±ng n·ªôi dung file t∆∞∆°ng ·ª©ng
                element.replaceWith(content);
                console.log(`‚úÖ ƒê√£ nh√∫ng th√†nh c√¥ng: ${fileToInclude}`);
            } else {
                console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file ${fileToInclude}`);
            }
        }
        
        // 5. Gom t·∫•t c·∫£ CSS v√†o trong th·∫ª <style>
        const cssLinks = root.querySelectorAll('link[rel="stylesheet"]');
        let allCssContent = '';
        console.log(`üé® T√¨m th·∫•y ${cssLinks.length} file CSS c·∫ßn gom.`);

        for (const link of cssLinks) {
            const cssHref = link.getAttribute('href');
            const cssPath = path.join(__dirname, cssHref);
            if (await fs.pathExists(cssPath)) {
                const cssContent = await fs.readFile(cssPath, 'utf8');
                allCssContent += `\n/* === B·∫Øt ƒë·∫ßu ${cssHref} === */\n${cssContent}\n/* === K·∫øt th√∫c ${cssHref} === */\n`;
                // X√≥a th·∫ª link c≈© ƒëi
                link.remove();
                 console.log(`‚úÖ ƒê√£ gom th√†nh c√¥ng CSS: ${cssHref}`);
            }
        }
        
        // T·∫°o m·ªôt th·∫ª <style> duy nh·∫•t v√† ch√®n v√†o <head>
        const head = root.querySelector('head');
        head.insertAdjacentHTML('beforeend', `<style>${allCssContent}</style>`);


        // 6. X√≥a c√°c script kh√¥ng c·∫ßn thi·∫øt cho LadiPage (nh∆∞ main.js)
        const mainScript = root.querySelector('script[src="main.js"]');
        if (mainScript) {
            mainScript.remove();
            console.log('üóëÔ∏è ƒê√£ x√≥a script main.js kh√¥ng c·∫ßn thi·∫øt.');
        }

        // 7. Ghi k·∫øt qu·∫£ cu·ªëi c√πng ra file ladipage-build.html
        const buildPath = path.join(__dirname, 'ladipage-build.html');
        await fs.writeFile(buildPath, root.toString());

        console.log('üéâ Build th√†nh c√¥ng! File k·∫øt qu·∫£ l√† ladipage-build.html');

    } catch (error) {
        console.error('‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh build:', error);
    }
}

// Ch·∫°y h√†m build
build();
