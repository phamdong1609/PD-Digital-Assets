// build.js - Version 3: Full JS Bundling

const fs = require('fs-extra');
const path = require('path');
const { parse } = require('node-html-parser');

async function build() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh build v3...');

        const indexPath = path.join(__dirname, 'index.html');
        console.log(`1. ƒê·ªçc file index.html t·ª´: ${indexPath}`);
        if (!await fs.pathExists(indexPath)) {
            throw new Error('L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y file index.html ·ªü th∆∞ m·ª•c g·ªëc!');
        }
        const indexHtmlContent = await fs.readFile(indexPath, 'utf8');

        console.log('2. Ph√¢n t√≠ch c√∫ ph√°p HTML...');
        const root = parse(indexHtmlContent);

        const includeElements = root.querySelectorAll('[data-include]');
        console.log(`3. T√¨m th·∫•y ${includeElements.length} th√†nh ph·∫ßn HTML c·∫ßn nh√∫ng.`);
        for (const element of includeElements) {
            const fileToInclude = element.getAttribute('data-include');
            const filePath = path.join(__dirname, fileToInclude);
            console.log(`   -> ƒêang x·ª≠ l√Ω HTML: ${fileToInclude}`);

            if (await fs.pathExists(filePath)) {
                const content = await fs.readFile(filePath, 'utf8');
                element.replaceWith(content);
            } else {
                console.warn(`   ‚ö†Ô∏è C·∫£nh b√°o: B·ªè qua v√¨ kh√¥ng t√¨m th·∫•y file ${fileToInclude}`);
            }
        }
        
        const cssLinks = root.querySelectorAll('link[rel="stylesheet"]');
        let allCssContent = '';
        console.log(`4. T√¨m th·∫•y ${cssLinks.length} file CSS c·∫ßn gom.`);
        for (const link of cssLinks) {
            const cssHref = link.getAttribute('href');
            const cssPath = path.join(__dirname, cssHref);
             console.log(`   -> ƒêang x·ª≠ l√Ω CSS: ${cssHref}`);

            if (await fs.pathExists(cssPath)) {
                const cssContent = await fs.readFile(cssPath, 'utf8');
                allCssContent += `\n/* === B·∫Øt ƒë·∫ßu ${cssHref} === */\n${cssContent}\n/* === K·∫øt th√∫c ${cssHref} === */\n`;
                link.remove();
            } else {
                 console.warn(`   ‚ö†Ô∏è C·∫£nh b√°o: B·ªè qua v√¨ kh√¥ng t√¨m th·∫•y file ${cssHref}`);
            }
        }
        
        if (allCssContent) {
            console.log('5. Nh√∫ng to√†n b·ªô CSS v√†o trong th·∫ª <style>...');
            const head = root.querySelector('head');
            head.insertAdjacentHTML('beforeend', `<style>${allCssContent}</style>`);
        }

        // *** N√ÇNG C·∫§P M·ªöI B·∫ÆT ƒê·∫¶U T·ª™ ƒê√ÇY ***
        console.log('6. T√¨m v√† nh√∫ng c√°c file JavaScript c·ª•c b·ªô...');
        const scriptTags = root.querySelectorAll('script[src]');
        for (const scriptTag of scriptTags) {
            const src = scriptTag.getAttribute('src');
            // Ch·ªâ x·ª≠ l√Ω c√°c file script c·ª•c b·ªô, b·ªè qua c√°c link b√™n ngo√†i (http, https)
            if (src && !src.startsWith('http')) {
                const scriptPath = path.join(__dirname, src);
                console.log(`   -> ƒêang x·ª≠ l√Ω JS: ${src}`);
                if (await fs.pathExists(scriptPath)) {
                    const scriptContent = await fs.readFile(scriptPath, 'utf8');
                    scriptTag.removeAttribute('src'); // B·ªè thu·ªôc t√≠nh src
                    scriptTag.set_content(scriptContent); // Nh√∫ng code v√†o th·∫≥ng th·∫ª script
                } else {
                    console.warn(`   ‚ö†Ô∏è C·∫£nh b√°o: B·ªè qua v√¨ kh√¥ng t√¨m th·∫•y file script ${src}`);
                }
            }
        }

        console.log('7. D·ªçn d·∫πp c√°c script kh√¥ng c·∫ßn thi·∫øt...');
        const mainScript = root.querySelector('script[src="main.js"]');
        if (mainScript) {
            // Script main.js c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n, b∆∞·ªõc n√†y ƒë·ªÉ ƒë·∫£m b·∫£o
            mainScript.remove();
            console.log('   -> ƒê√£ x√≥a script main.js.');
        }

        const buildPath = path.join(__dirname, 'ladipage-build.html');
        console.log(`8. Ghi k·∫øt qu·∫£ cu·ªëi c√πng ra file: ${buildPath}`);
        await fs.writeFile(buildPath, root.toString());

        console.log('\nüéâ Build th√†nh c√¥ng! File "ladipage-build.html" ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p v·ªõi ƒë·∫ßy ƒë·ªß JavaScript.');

    } catch (error) {
        console.error('\n‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh build:');
        console.error(error.message);
    }
}

build();
