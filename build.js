// Import c√°c module c·∫ßn thi·∫øt c·ªßa Node.js
const fs = require('fs');
const path = require('path');
const posthtml = require('posthtml');
const include = require('posthtml-include');

// ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n quan tr·ªçng
const templatesDir = path.join(__dirname, 'template');
const distDir = path.join(__dirname, 'dist');
const rootDir = __dirname; // Th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n

/**
 * H√†m l·∫Øp r√°p m·ªôt file HTML duy nh·∫•t, bao g·ªìm c·∫£ CSS v√† JS.
 * @param {string} templateFile - T√™n file template (v√≠ d·ª•: 'ct9-index.html')
 */
async function buildSinglePage(templateFile) {
    const sourcePath = path.join(templatesDir, templateFile);
    const outputHtmlName = templateFile.replace('-index.html', '-dist.html');
    const destPath = path.join(distDir, outputHtmlName);

    console.log(`\n--- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω: ${templateFile} ---`);
    try {
        const htmlContent = fs.readFileSync(sourcePath, 'utf8');
        
        const includePaths = [];
        const includeRegex = /<include src="([^"]+)"/g;
        let match;
        // Reset lastIndex tr∆∞·ªõc m·ªói l·∫ßn th·ª±c thi m·ªõi
        includeRegex.lastIndex = 0; 
        while ((match = includeRegex.exec(htmlContent)) !== null) {
            includePaths.push(match[1]);
        }

        // === 1. T·ªîNG H·ª¢P CSS ===
        console.log(`   - ƒêang t·ªïng h·ª£p c√°c file CSS...`);
        const cssContents = [];
        const themeFileName = templateFile.replace('-index.html', '-theme.css');
        const themePath = path.join(rootDir, 'core', 'styles', themeFileName);
        
        if (fs.existsSync(themePath)) {
            cssContents.push(fs.readFileSync(themePath, 'utf8'));
        }

        includePaths.forEach(includePath => {
            const cssPath = path.join(rootDir, includePath.replace('.html', '.css'));
            if (fs.existsSync(cssPath)) {
                cssContents.push(fs.readFileSync(cssPath, 'utf8'));
            }
        });
        const finalCss = cssContents.join('\n\n');
        console.log(`   ‚úÖ ƒê√£ t·ªïng h·ª£p xong CSS.`);

        // === 2. T·ªîNG H·ª¢P JAVASCRIPT (ƒê√É S·ª¨A L·ªñI TR√ôNG L·∫∂P) ===
        console.log(`   - ƒêang t·ªïng h·ª£p c√°c file JS...`);
        const jsContents = [];
        const initFileName = templateFile.replace('-index.html', '-init.js');
        const initPath = path.join(rootDir, 'core', 'scripts', initFileName);

        // ∆Øu ti√™n file init. N·∫øu c√≥, ch·ªâ d√πng n√≥.
        if (fs.existsSync(initPath)) {
            console.log(`   -> ƒê√£ t√¨m th·∫•y file init ch√≠nh: ${initFileName}. S·∫Ω ch·ªâ s·ª≠ d·ª•ng file n√†y.`);
            jsContents.push(fs.readFileSync(initPath, 'utf8'));
        } else {
            // N·∫øu kh√¥ng c√≥ file init, m·ªõi ƒëi thu th·∫≠p t·ª´ c√°c component l·∫ª
            console.log(`   -> Kh√¥ng t√¨m th·∫•y file init. S·∫Ω thu th·∫≠p JS t·ª´ c√°c component...`);
            includePaths.forEach(includePath => {
                const jsPath = path.join(rootDir, includePath.replace('.html', '.js'));
                if (fs.existsSync(jsPath)) {
                    jsContents.push(fs.readFileSync(jsPath, 'utf8'));
                }
            });
        }
        const finalJs = jsContents.join(';\n\n');
        console.log(`   ‚úÖ ƒê√£ t·ªïng h·ª£p xong JS.`);


        // === 3. L·∫ÆP R√ÅP HTML (QUY TR√åNH M·ªöI ƒê·∫¢M B·∫¢O TH·ª® T·ª∞) ===
        console.log(`   - ƒêang l·∫Øp r√°p v√† ƒë√≥ng g√≥i HTML...`);
        
        // B∆∞·ªõc 3.1: Ch√®n CSS v√† JS v√†o file template G·ªêC tr∆∞·ªõc
        let intermediateHtml = htmlContent
            .replace('', `<style>\n${finalCss}\n</style>`)
            .replace('', `<script>\n${finalJs}\n</script>`);

        // B∆∞·ªõc 3.2: B√¢y gi·ªù m·ªõi d√πng posthtml ƒë·ªÉ x·ª≠ l√Ω c√°c th·∫ª <include> tr√™n file ƒë√£ ƒë∆∞·ª£c ch√®n
        const result = await posthtml([include({ root: rootDir })]).process(intermediateHtml);
        
        const finalHtml = result.html;

        fs.writeFileSync(destPath, finalHtml);
        console.log(`   ‚úÖ ƒê√£ t·∫°o file ho√†n ch·ªânh: ${outputHtmlName}`);

        return { status: 'fulfilled', file: templateFile };

    } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file ${templateFile}:`, error.message);
        return { status: 'rejected', file: templateFile, reason: error.message };
    }
}

/**
 * H√†m ch√≠nh, "qu·∫£n ƒë·ªëc nh√† m√°y".
 */
async function buildAllPages() {
    console.log('--- KH·ªûI ƒê·ªòNG NH√Ä M√ÅY S·∫¢N XU·∫§T T·ª∞ ƒê·ªòNG ---');
    try {
        if (!fs.existsSync(distDir)) {
            fs.mkdirSync(distDir, { recursive: true });
        }

        const templateFiles = fs.readdirSync(templatesDir).filter(file =>
            file.endsWith('-index.html')
        );

        if (templateFiles.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y file template n√†o trong th∆∞ m·ª•c /template.');
            return;
        }

        const results = await Promise.all(templateFiles.map(buildSinglePage));

        const successCount = results.filter(r => r.status === 'fulfilled').length;
        console.log('\n--- B√ÅO C√ÅO K·∫æT QU·∫¢ ---');
        console.log(`Th√†nh c√¥ng: ${successCount}/${results.length}`);
        if (successCount < results.length) {
            console.log(`Th·∫•t b·∫°i: ${results.length - successCount}/${results.length}`);
        }
        console.log('üéâ Qu√° tr√¨nh build ƒë√£ ho√†n t·∫•t! üéâ');

    } catch (error) {
        console.error('‚ùå ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng trong nh√† m√°y:', error);
    }
}

buildAllPages();
