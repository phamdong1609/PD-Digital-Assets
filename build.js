const fs = require('fs');
const path = require('path');
const posthtml = require('posthtml');
const include = require('posthtml-include');

const rootDir = __dirname;
const templatesDir = path.join(rootDir, 'template');
const distDir = path.join(rootDir, 'dist');
const libraryDir = path.join(rootDir, 'library');
const coreDir = path.join(rootDir, 'core');

/**
 * H√†m qu√©t ƒë·ªá quy ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c file CSS trong th∆∞ m·ª•c library
 * @returns {string[]} M·ªôt m·∫£ng ch·ª©a n·ªôi dung c·ªßa t·∫•t c·∫£ c√°c file CSS
 */
function getAllLibraryCss() {
    console.log('   - Qu√©t to√†n b·ªô kho linh ki·ªán CSS...');
    const cssContents = [];
    const readFilesRecursively = (dir) => {
        const files = fs.readdirSync(dir);
        files.forEach(file => {
            const fullPath = path.join(dir, file);
            if (fs.statSync(fullPath).isDirectory()) {
                readFilesRecursively(fullPath);
            } else if (path.extname(file) === '.css') {
                cssContents.push(fs.readFileSync(fullPath, 'utf8'));
            }
        });
    };
    readFilesRecursively(libraryDir);
    console.log(`   ‚úÖ ƒê√£ t√¨m th·∫•y v√† n·∫°p ${cssContents.length} file CSS t·ª´ library.`);
    return cssContents;
}

// T·ªëi ∆∞u: Ch·ªâ qu√©t library m·ªôt l·∫ßn v√† l∆∞u k·∫øt qu·∫£
const allLibraryCssContents = getAllLibraryCss();

async function buildSinglePage(templateFile) {
    const hubName = path.basename(templateFile, '-index.html'); // => "ct8", "ct9"
    const sourcePath = path.join(templatesDir, templateFile);
    const destPath = path.join(distDir, `${hubName}-dist.html`);

    console.log(`\n--- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω: ${hubName} ---`);
    try {
        const htmlContent = fs.readFileSync(sourcePath, 'utf8');

        // === 1. T·ªîNG H·ª¢P CSS TH√îNG MINH ===
        const cssContents = [];

        // 1.1 N·∫°p theme.css l√µi
        const themePath = path.join(coreDir, 'styles', 'theme.css');
        if (fs.existsSync(themePath)) {
            cssContents.push(fs.readFileSync(themePath, 'utf8'));
        }

        // 1.2 N·∫°p T·∫§T C·∫¢ CSS t·ª´ kho library
        cssContents.push(...allLibraryCssContents);
        
        const finalCss = cssContents.join('\n\n');
        console.log('   ‚úÖ ƒê√£ t·ªïng h·ª£p CSS th√†nh c√¥ng.');

        // === 2. ƒê√ìNG G√ìI JAVASCRIPT ===
        console.log(`   - T√¨m v√† ƒë√≥ng g√≥i JS cho ${hubName}...`);
        const initPath = path.join(coreDir, 'scripts', `${hubName}-init.js`);
        let finalJs = '';

        if (fs.existsSync(initPath)) {
            finalJs = fs.readFileSync(initPath, 'utf8');
             console.log(`   ‚úÖ ƒê√£ n·∫°p ${hubName}-init.js`);
        } else {
            console.log(`   -> Kh√¥ng t√¨m th·∫•y file init cho ${hubName}. B·ªè qua JS.`);
        }
        
        // === 3. L·∫ÆP R√ÅP HTML ===
        console.log('   - ƒêang l·∫Øp r√°p v√† ƒë√≥ng g√≥i HTML...');
        let intermediateHtml = htmlContent
            .replace('<!-- INJECT_CSS_PLACEHOLDER -->', `<style>\n${finalCss}\n</style>`)
            .replace('<!-- INJECT_JS_PLACEHOLDER -->', `<script>\n${finalJs}\n</script>`);

        const result = await posthtml([include({ root: rootDir })]).process(intermediateHtml);
        fs.writeFileSync(destPath, result.html);
        console.log(`   üéâ ƒê√£ t·∫°o file ho√†n ch·ªânh: ${path.basename(destPath)}`);

    } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file ${templateFile}:`, error);
    }
}

async function buildAll() {
    console.log('--- KH·ªûI ƒê·ªòNG NH√Ä M√ÅY S·∫¢N XU·∫§T T·ª∞ ƒê·ªòNG ---');
    if (!fs.existsSync(distDir)) {
        fs.mkdirSync(distDir, { recursive: true });
    }
    const templateFiles = fs.readdirSync(templatesDir).filter(file => file.endsWith('-index.html'));
    
    for (const file of templateFiles) {
        await buildSinglePage(file);
    }
    
    console.log('\n--- B√ÅO C√ÅO: Qu√° tr√¨nh build ƒë√£ ho√†n t·∫•t! ---');
}

buildAll();