// Import c√°c module c·∫ßn thi·∫øt c·ªßa Node.js
const fs = require('fs'); // Module ƒë·ªÉ l√†m vi·ªác v·ªõi h·ªá th·ªëng file
const path = require('path'); // Module ƒë·ªÉ l√†m vi·ªác v·ªõi ƒë∆∞·ªùng d·∫´n file
const fileinclude = require('gulp-file-include'); // Module ch√≠nh ƒë·ªÉ l·∫Øp r√°p file

// ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n quan tr·ªçng
const templatesDir = path.join(__dirname, 'template'); // Th∆∞ m·ª•c ch·ª©a c√°c "b·∫£n v·∫Ω"
const distDir = path.join(__dirname, 'dist'); // Th∆∞ m·ª•c ch·ª©a "s·∫£n ph·∫©m ho√†n thi·ªán"
const libraryDir = path.join(__dirname, 'library'); // Th∆∞ m·ª•c ch·ª©a "th∆∞ vi·ªán linh ki·ªán"

// H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán vi·ªác l·∫Øp r√°p
async function buildPages() {
    try {
        // --- B∆∞·ªõc 1: ƒê·∫£m b·∫£o th∆∞ m·ª•c /dist t·ªìn t·∫°i ---
        if (!fs.existsSync(distDir)) {
            fs.mkdirSync(distDir, { recursive: true });
            console.log('ƒê√£ t·∫°o th∆∞ m·ª•c /dist.');
        }

        // --- B∆∞·ªõc 2: ƒê·ªçc t·∫•t c·∫£ c√°c "b·∫£n v·∫Ω" t·ª´ th∆∞ m·ª•c /templates ---
        const templateFiles = fs.readdirSync(templatesDir).filter(file => 
            file.endsWith('.html') && !fs.statSync(path.join(templatesDir, file)).isDirectory()
        );

        if (templateFiles.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y file template n√†o trong th∆∞ m·ª•c /template.');
            return;
        }

        console.log(`ƒê√£ t√¨m th·∫•y ${templateFiles.length} file template:`, templateFiles);

        // --- B∆∞·ªõc 3: L·∫Øp r√°p t·ª´ng "b·∫£n v·∫Ω" ---
        for (const file of templateFiles) {
            const sourcePath = path.join(templatesDir, file);
            
            // T·∫°o t√™n file ƒë·∫ßu ra, v√≠ d·ª•: ct8-index.html -> ct8-dist.html
            const outputFileName = file.replace('-index.html', '-dist.html');
            const destPath = path.join(distDir, outputFileName);

            console.log(`ƒêang x·ª≠ l√Ω: ${file} -> ${outputFileName}`);

            // S·ª≠ d·ª•ng gulp-file-include ƒë·ªÉ l·∫Øp r√°p
            await new Promise((resolve, reject) => {
                fileinclude({
                    prefix: '@@',
                    basepath: libraryDir, // Cho ph√©p @@include t√¨m file t·ª´ th∆∞ m·ª•c /library
                    context: {
                        // N∆°i b·∫°n c√≥ th·ªÉ truy·ªÅn bi·∫øn v√†o file HTML n·∫øu c·∫ßn
                    }
                })
                .on('error', reject)
                .pipe(fs.createReadStream(sourcePath))
                .pipe(fs.createWriteStream(destPath))
                .on('finish', resolve)
                .on('error', reject);
            });

            console.log(`‚úÖ ƒê√£ l·∫Øp r√°p th√†nh c√¥ng: ${outputFileName}`);
        }

        console.log('\nüéâ Qu√° tr√¨nh build ƒë√£ ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh build:', error);
    }
}

// Ch·∫°y h√†m l·∫Øp r√°p
buildPages();
