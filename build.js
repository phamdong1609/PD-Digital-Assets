// build.js (Version 3.0 - Now with Expressions!)

const fs = require('fs');
const path = require('path');
const posthtml = require('posthtml');
const include = require('posthtml-include');
// --- B∆Ø·ªöC N√ÇNG C·∫§P 1: Import c√¥ng c·ª• m·ªõi ---
const expressions = require('posthtml-expressions');

// --- KHAI B√ÅO C√ÅC ƒê∆Ø·ªúNG D·∫™N C·ªêT L√ïI (Kh√¥ng ƒë·ªïi) ---
const rootDir = __dirname;
const templatesDir = path.join(rootDir, 'template');
const distDir = path.join(rootDir, 'dist');
const libraryDir = path.join(rootDir, 'library');
const coreDir = path.join(rootDir, 'core');

// --- C√ÅC H√ÄM HI·ªÜN T·∫†I (Kh√¥ng ƒë·ªïi) ---
function getIncludedComponents(htmlContent) {
    console.log('   - ƒêang ph√¢n t√≠ch b·∫£n thi·∫øt k·∫ø ƒë·ªÉ t√¨m linh ki·ªán...');
    // C·∫≠p nh·∫≠t Regex ƒë·ªÉ b·∫Øt c·∫£ c√°c th·∫ª include c√≥ thu·ªôc t√≠nh locals
    const includeRegex = /<include src="([^"]+)"/g;
    const components = [];
    let match;
    while ((match = includeRegex.exec(htmlContent)) !== null) {
        components.push(match[1]);
    }
    console.log(`   ‚úÖ ƒê√£ t√¨m th·∫•y ${components.length} linh ki·ªán c·∫ßn l·∫Øp r√°p.`);
    return components;
}

async function buildSinglePage(templateFile) {
    const hubName = path.basename(templateFile, '-index.html');
    const sourcePath = path.join(templatesDir, templateFile);
    const destPath = path.join(distDir, `${hubName}-dist.html`);

    console.log(`\n--- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë∆°n h√†ng: ${hubName} ---`);
    try {
        let htmlContent = fs.readFileSync(sourcePath, 'utf8');
        
        const requiredComponents = getIncludedComponents(htmlContent);

        // === 1. T·ªîNG H·ª¢P CSS TH√îNG MINH (Kh√¥ng ƒë·ªïi) ===
        console.log('   - ƒêang t·ªïng h·ª£p CSS theo ƒë∆°n h√†ng...');
        const cssContents = [];
        const themePath = path.join(coreDir, 'styles', 'theme.css');
        if (fs.existsSync(themePath)) {
            cssContents.push(fs.readFileSync(themePath, 'utf8'));
        }
        requiredComponents.forEach(componentPath => {
            const cssPath = path.join(rootDir, componentPath.replace('.html', '.css'));
            if (fs.existsSync(cssPath)) {
                cssContents.push(fs.readFileSync(cssPath, 'utf8'));
            }
        });
        const finalCss = cssContents.join('\n\n');
        console.log('   ‚úÖ ƒê√£ t·ªïng h·ª£p CSS th√†nh c√¥ng.');

        // === 2. ƒê√ìNG G√ìI JAVASCRIPT TH√îNG MINH (Kh√¥ng ƒë·ªïi) ===
        console.log(`   - ƒêang ƒë√≥ng g√≥i JS theo ƒë∆°n h√†ng cho ${hubName}...`);
        const jsContents = [];
        requiredComponents.forEach(componentPath => {
            const jsPath = path.join(rootDir, componentPath.replace('.html', '.js'));
            if (fs.existsSync(jsPath)) {
                jsContents.push(fs.readFileSync(jsPath, 'utf8'));
            }
        });
        const initPath = path.join(coreDir, 'scripts', `${hubName}-init.js`);
        if (fs.existsSync(initPath)) {
            jsContents.push(fs.readFileSync(initPath, 'utf8'));
        }
        const finalJs = jsContents.join('\n\n');
        console.log('   ‚úÖ ƒê√£ ƒë√≥ng g√≥i JS th√†nh c√¥ng.');
        
        // === 3. L·∫ÆP R√ÅP HTML (N√¢ng c·∫•p) ===
        console.log('   - ƒêang l·∫Øp r√°p v√† ƒë√≥ng g√≥i HTML...');
        
        // --- B∆Ø·ªöC N√ÇNG C·∫§P 2: S·ª≠ d·ª•ng pipeline m·ªõi v·ªõi expressions ---
        const result = await posthtml([
            include({ root: rootDir, encoding: 'utf8' }),
            expressions({ locals: {} }) // Th√™m expressions v√†o pipeline
        ]).process(htmlContent);

        // Thay th·∫ø c√°c placeholder CSS v√† JS sau khi ƒë√£ x·ª≠ l√Ω include
        let finalHtml = result.html
            .replace('<!-- INJECT_CSS_PLACEHOLDER -->', `<style>\n${finalCss}\n</style>`)
            .replace('<!-- INJECT_JS_PLACEHOLDER -->', `<script>\n${finalJs}\n</script>`);

        fs.writeFileSync(destPath, finalHtml);
        console.log(`   üéâ ƒê√£ t·∫°o file ho√†n ch·ªânh: ${path.basename(destPath)}`);

    } catch (error) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file ${templateFile}:`, error);
    }
}

async function buildAll() {
    console.log('--- KH·ªûI ƒê·ªòNG NH√Ä M√ÅY S·∫¢N XU·∫§T PHI√äN B·∫¢N 3.0 ---');
    if (!fs.existsSync(distDir)) {
        fs.mkdirSync(distDir, { recursive: true });
    }
    const templateFiles = fs.readdirSync(templatesDir).filter(file => file.endsWith('-index.html'));
    
    for (const file of templateFiles) {
        await buildSinglePage(file);
    }
    
    console.log('\n--- B√ÅO C√ÅO: Qu√° tr√¨nh build ƒë√£ ho√†n t·∫•t! ---');
}

buildAll();
